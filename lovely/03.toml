[manifest]
version = "1.0.0"
priority = 0


[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.FUNCS.hand_chip_UI_set = function(e)
  local new_chip_text = number_format(G.GAME.current_round.current_hand.chips)
    if new_chip_text ~= G.GAME.current_round.current_hand.chip_text then
      G.GAME.current_round.current_hand.chip_text = new_chip_text
      e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, 0.9, 1000)
      e.config.object:update_text()
      if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, math.max(0,math.floor(math.log10(type(G.GAME.current_round.current_hand.chips) == 'number' and G.GAME.current_round.current_hand.chips or 1)))) end
    end
end
'''
position = "at"
payload = '''
G.FUNCS.hand_chip_UI_set = function(e)
  local new_chip_text = number_format(G.GAME.current_round.current_hand.chips)
    if new_chip_text ~= G.GAME.current_round.current_hand.chip_text then
      G.GAME.current_round.current_hand.chip_text = new_chip_text

      local poop = G.GAME.current_round.current_hand.chips
      if type(G.GAME.current_round.current_hand.chips) == 'number' then
        poop = math.abs(G.GAME.current_round.current_hand.chips)
      end

      e.config.object.scale = scale_number(poop, 0.9, 1000)
      e.config.object:update_text()


      if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, math.max(0,math.floor(math.log10(type(G.GAME.current_round.current_hand.chips) == 'number' and poop or 1)))) end
    end
end
'''
match_indent = true
times = 1


[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
text = localize{type='variable',key='a_chips',vars={amt}}
'''
position = "at"
payload = '''
local locale_key = 'a_chips'
if (amt < 0) then
  locale_key = 'a_chips_minus'
end
text = localize{type='variable',key=locale_key,vars={math.abs(amt)}}
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
text = localize{type='variable',key='a_mult',vars={amt}}
'''
position = "at"
payload = '''
local locale_key = 'a_mult'
if (amt < 0) then
  locale_key = 'a_mult_minus'
end
text = localize{type='variable',key=locale_key,vars={math.abs(amt)}}
'''
match_indent = true
times = 1